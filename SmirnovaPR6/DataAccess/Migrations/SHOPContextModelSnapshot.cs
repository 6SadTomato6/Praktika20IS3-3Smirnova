// <auto-generated />
using System;
using DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(SHOPContext))]
    partial class SHOPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Models.CartItem", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int")
                        .HasColumnName("product_count");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("numeric(9,2)")
                        .HasColumnName("product_price");

                    b.HasKey("CartId", "ProductId")
                        .HasName("PK_PURCHASE_ITEMS");

                    b.HasIndex("ProductId");

                    b.ToTable("Cart_items", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("category_name");

                    b.Property<int>("FilterId")
                        .HasColumnType("int")
                        .HasColumnName("filter_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.HasKey("CategoryId");

                    b.HasIndex("FilterId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DataAccess.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("customer_email");

                    b.Property<string>("CustomerFname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("customer_fname");

                    b.Property<string>("CustomerLname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("customer_lname");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DataAccess.Models.Delivery", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("date")
                        .HasColumnName("delivery_date");

                    b.Property<int>("DeliveryMethodId")
                        .HasColumnType("int")
                        .HasColumnName("delivery_method_id");

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("delivery_status");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.HasIndex("CartId");

                    b.HasIndex("DeliveryMethodId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("DataAccess.Models.DeliveryMethod", b =>
                {
                    b.Property<int>("DeliveryMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("delivery_method_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryMethodId"), 1L, 1);

                    b.Property<string>("DeliveryMethodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("delivery_method_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.HasKey("DeliveryMethodId");

                    b.ToTable("Delivery_method", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Filter", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("filter_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FilterId"), 1L, 1);

                    b.Property<string>("FilterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("filter_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.HasKey("FilterId");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("DataAccess.Models.PriceChange", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("DatePriceChange")
                        .HasColumnType("date")
                        .HasColumnName("date_price_change");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("numeric(9,2)")
                        .HasColumnName("new_price");

                    b.HasKey("ProductId", "DatePriceChange")
                        .HasName("PK_PRICE_CHANGE");

                    b.ToTable("Price_change", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int")
                        .HasColumnName("product_count");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("product_name");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DataAccess.Models.ShoppingCart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"), 1L, 1);

                    b.Property<DateTime>("CartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("cart_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.HasKey("CartId")
                        .HasName("PK__Shopping__2EF52A27A2F44812");

                    b.HasIndex("CustomerId");

                    b.ToTable("Shopping_cart", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.CartItem", b =>
                {
                    b.HasOne("DataAccess.Models.ShoppingCart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK__Cart_item__cart___47DBAE45");

                    b.HasOne("DataAccess.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__Cart_item__produ__46E78A0C");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccess.Models.Category", b =>
                {
                    b.HasOne("DataAccess.Models.Filter", "Filter")
                        .WithMany("Categories")
                        .HasForeignKey("FilterId")
                        .IsRequired()
                        .HasConstraintName("FK__Categorie__filte__398D8EEE");

                    b.Navigation("Filter");
                });

            modelBuilder.Entity("DataAccess.Models.Delivery", b =>
                {
                    b.HasOne("DataAccess.Models.ShoppingCart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK__Deliverie__cart___4BAC3F29");

                    b.HasOne("DataAccess.Models.DeliveryMethod", "DeliveryMethod")
                        .WithMany()
                        .HasForeignKey("DeliveryMethodId")
                        .IsRequired()
                        .HasConstraintName("FK__Deliverie__deliv__4CA06362");

                    b.Navigation("Cart");

                    b.Navigation("DeliveryMethod");
                });

            modelBuilder.Entity("DataAccess.Models.PriceChange", b =>
                {
                    b.HasOne("DataAccess.Models.Product", "Product")
                        .WithMany("PriceChanges")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__Price_cha__produ__3F466844");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccess.Models.Product", b =>
                {
                    b.HasOne("DataAccess.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Products__catego__3C69FB99");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DataAccess.Models.ShoppingCart", b =>
                {
                    b.HasOne("DataAccess.Models.Customer", "Customer")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Shopping___custo__440B1D61");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DataAccess.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DataAccess.Models.Customer", b =>
                {
                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("DataAccess.Models.Filter", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("DataAccess.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("PriceChanges");
                });

            modelBuilder.Entity("DataAccess.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
